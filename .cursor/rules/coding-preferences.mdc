---
description: 
globs: 
alwaysApply: true
---
- 항상 간단한 해결책을 선호하세요.
- 가능한 코드 중복을 피하세요. 이는 코드베이스(codebase)의 다른 영역에 이미 유사한 코드나 기능이 있는지 확인하는 것을 의미합니다.
- 개발(dev), 테스트(test), 운영(prod) 등 다양한 환경을 고려하여 코드를 작성하세요.
- 요청된 변경사항만 적용하거나, 요청된 변경과 관련하여 잘 이해하고 있다고 확신하는 경우에만 신중하게 변경하세요.
- 이슈(issue)나 버그(bug)를 수정할 때, 기존 구현 방식의 모든 옵션을 소진하기 전에는 새로운 패턴(pattern)이나 기술(technology)을 도입하지 - 마세요. 만약 결국 새로운 것을 도입하게 된다면, 중복된 로직(logic)이 없도록 이후에 기존 구현을 반드시 제거하세요.
- 코드베이스(codebase)를 매우 깔끔하고 체계적으로 유지하세요.
- 가능하다면 파일에 스크립트(scripts)를 작성하는 것을 피하세요. 특히 해당 스크립트(script)가 한 번만 실행될 가능성이 높은 경우에는 더욱 - 그렇습니다.
- 파일이 200-300줄을 넘지 않도록 하세요. 그 시점에서 리팩터링(Refactor)하세요.
- 데이터 모킹(Mocking data)은 테스트(tests)에만 필요하며, 개발(dev)이나 운영(prod) 환경에서는 절대 데이터를 모킹(mock data)하지 마세요.
- 개발(dev)이나 운영(prod) 환경에 영향을 미치는 코드에는 스터빙(stubbing)이나 가짜 데이터 패턴(fake data patterns)을 절대 추가하지 마세요.
- 먼저 묻고 확인하기 전에는 절대로 .env 파일을 덮어쓰지 마세요.
- 절대로 git commit을 비롯한 git 명령어를 사용하지 마세요. 이것은 사용자가 합니다. 